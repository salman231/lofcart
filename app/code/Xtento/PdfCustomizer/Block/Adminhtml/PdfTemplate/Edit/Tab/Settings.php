<?php

/**
 * Product:       Xtento_PdfCustomizer
 * ID:            62/NQWL5Lum38rXboT76lWjXOaztcOud5OvQih0FVjI=
 * Last Modified: 2020-09-09T13:37:33+00:00
 * File:          app/code/Xtento/PdfCustomizer/Block/Adminhtml/PdfTemplate/Edit/Tab/Settings.php
 * Copyright:     Copyright (c) XTENTO GmbH & Co. KG <info@xtento.com> / All rights reserved.
 */

namespace Xtento\PdfCustomizer\Block\Adminhtml\PdfTemplate\Edit\Tab;

use Xtento\PdfCustomizer\Model\PdfTemplate;
use Xtento\PdfCustomizer\Model\Source\TemplatePaperOrientation;
use Xtento\PdfCustomizer\Model\Source\TemplatePaperForm as TemplatePaperFormat;
use Xtento\PdfCustomizer\Model\Source\TemplateType;
use Magento\Backend\Block\Template\Context;
use Magento\Framework\Data\Form;
use Magento\Framework\Data\FormFactory;
use Magento\Framework\Phrase;
use Magento\Framework\Registry;
use Magento\Backend\Block\Widget\Form\Generic;
use Magento\Backend\Block\Widget\Tab\TabInterface;
use Magento\Config\Model\Config\Source\Yesno;
use Magento\Store\Model\System\Store as SystemStore;

/**
 * Class Settings
 * @package Xtento\PdfCustomizer\Block\Adminhtml\PdfTemplate\Edit\Tab
 */
class Settings extends Generic implements TabInterface
{
    /**
     * @var TemplatePaperOrientation
     */
    private $templatePaperOrientation;

    /**
     * @var Yesno
     */
    private $yesNo;

    /**
     * @var TemplatePaperFormat
     */
    private $templatePaperFormat;

    /**
     * @var SystemStore
     */
    private $systemStore;

    /**
     * Settings constructor.
     * @param Context $context
     * @param Registry $registry
     * @param FormFactory $formFactory
     * @param TemplatePaperOrientation $templatePaperOrientation
     * @param Yesno $yesNo
     * @param TemplatePaperFormat $templatePaperFormat
     * @param SystemStore $systemStore
     * @param array $data
     */
    public function __construct(
        Context $context,
        Registry $registry,
        FormFactory $formFactory,
        TemplatePaperOrientation $templatePaperOrientation,
        Yesno $yesNo,
        TemplatePaperFormat $templatePaperFormat,
        SystemStore $systemStore,
        array $data = []
    ) {
        $this->templatePaperFormat = $templatePaperFormat;
        $this->yesNo = $yesNo;
        $this->templatePaperOrientation = $templatePaperOrientation;
        $this->systemStore = $systemStore;
        parent::__construct($context, $registry, $formFactory, $data);
    }

    /**
     * @return $this
     */
    public function _prepareForm()
    {

        /** @var PdfTemplate $model */
        $model = $this->_coreRegistry->registry('pdfcustomizer_template');

        /** @var Form $form */
        $form = $this->_formFactory->create();

        $htmlIdPrefix = 'template_';
        $form->setHtmlIdPrefix($htmlIdPrefix);

        $fieldSet = $form->addFieldset('base_fieldset', ['legend' => __('PDF Configuration')]);

        if ($model->getId()) {
            $fieldSet->addField('template_id', 'hidden', ['name' => 'template_id']);
        }

        $fieldSet->addField(
            'template_file_name',
            'text',
            [
                'name' => 'template_file_name',
                'label' => __('PDF Filename'),
                'title' => __('PDF Filename'),
                'note' => __('This is the filename given to PDF files generated by this template. Several variables can be used, example: {{var increment_id}}'),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'save_pdf_in_backup_folder',
            'select',
            [
                'name' => 'save_pdf_in_backup_folder',
                'label' => __('Save PDF in backup folder'),
                'title' => __('Save PDF in backup folder'),
                'values' => $this->yesNo->toOptionArray(),
                'note' => __('If enabled, all PDFs generated by this profile will be saved in the ./var/xtento_pdf/ folder. This can be very useful, for example for legal reasons: In some countries, invoices given to customers may not be changed after generation. This makes sure, even if you change this PDF Template, the original generated PDF invoice will not change.')
            ]
        );

        $fieldSet->addField(
            'read_pdf_from_backup_folder',
            'select',
            [
                'name' => 'read_pdf_from_backup_folder',
                'label' => __('Read PDF from backup folder'),
                'title' => __('Read PDF from backup folder'),
                'values' => $this->yesNo->toOptionArray(),
                'note' => __('If enabled, if you\'re re-printing an order/invoice/... and it has already been generated as a PDF by this profile, no "new" PDF will be created but instead the backup/copy created and stored in the ./var/xtento_pdf/ backup folder will be returned. This is useful if you are not allowed to change generated invoices/etc. after initial generation.')
            ]
        );

        $templateType = $model->getData('template_type');
        if ($templateType != TemplateType::TYPE_SECONDARY_ATTACHMENT) {
            $fieldSet->addField(
                'attachments',
                'text',
                [
                    'name' => 'attachments',
                    'label' => __('Attachment PDFs'),
                    'title' => __('Attachment PDFs'),
                    'note' => __('Enter template IDs (comma-separated) of "attachment" PDFs (PDF Type must be "Attachment") you would like to generate and attach to emails when this PDF is triggered, for example on order placement. Use this to upload your terms and conditions into an attachment PDF profile, then this will be attached to the order email as well.'),
                    'required' => false,
                ]
            );
        }


        if ($templateType == TemplateType::TYPE_SECONDARY_ATTACHMENT) {
            $fieldSet = $form->addFieldset('attachment_fieldset', ['legend' => __('Attachment Configuration')]);

            if ($model->getData('attachment_pdf_file') != '') {
                $fieldSet->addField(
                    'template_attachment_pdf_current_value',
                    'text',
                    [
                        'name' => 'template_attachment_pdf_current_value',
                        'label' => __('Currently Active Attachment'),
                        'title' => __('Currently Active Attachment'),
                        'note' => __('This is the PDF that is currently being used when this attachment is generated.'),
                        'required' => false,
                        'readonly' => true
                    ]
                );
                $model->setData('template_attachment_pdf_current_value', $model->getData('attachment_pdf_file'));

                $fieldSet->addField(
                    'template_attachment_pdf_remove',
                    'checkbox',
                    [
                        'name' => 'template_attachment_pdf_remove',
                        'label' => __('Remove background PDF'),
                        'title' => __('Remove background PDF'),
                        'note' => __('If checked and you save this PDF template, the PDF attachment will be removed/reset.'),
                        'required' => false
                    ]
                );
            }

            $fieldSet->addField(
                'template_attachment_pdf',
                'file',
                [
                    'name' => 'template_attachment_pdf',
                    'label' => __('Upload PDF to attach'),
                    'title' => __('Upload PDF to attach'),
                    'required' => false,
                    'class' => 'input-file',
                    'after_element_html' => '<script type="text/javascript">require([\'jquery\'], function ($) {$(\'#template_template_attachment_pdf\').attr(\'accept\', \'.pdf\')});</script>',
                    'note' => __('Upload a static PDF file here that will be used when this attachment is generated. This means, you don\'t configure HTML/CSS in the "PDF Template" tab but instead whenever this attachment is generated, the PDF file you upload here will be used. Great to add terms & conditions, etc.')
                ]
            );
        } else {
            $fieldSet = $form->addFieldset('attachment_fieldset', ['legend' => __('Background Configuration')]);

            if ($model->getData('attachment_pdf_file') != '') {
                $fieldSet->addField(
                    'template_attachment_pdf_current_value',
                    'text',
                    [
                        'name' => 'template_attachment_pdf_current_value',
                        'label' => __('Active Background PDF'),
                        'title' => __('Active Background PDF'),
                        'note' => __('This is the PDF that is currently being used as the PDF background.'),
                        'required' => false,
                        'readonly' => true
                    ]
                );
                $model->setData('template_attachment_pdf_current_value', $model->getData('attachment_pdf_file'));

                $fieldSet->addField(
                    'template_attachment_pdf_remove',
                    'checkbox',
                    [
                        'name' => 'template_attachment_pdf_remove',
                        'label' => __('Remove background PDF'),
                        'title' => __('Remove background PDF'),
                        'note' => __('If checked and you save this PDF template, the PDF background will be removed/reset.'),
                        'required' => false
                    ]
                );
            }

            $fieldSet->addField(
                'template_attachment_pdf',
                'file',
                [
                    'name' => 'template_attachment_pdf',
                    'label' => __('Upload Background PDF'),
                    'title' => __('Upload Background PDF'),
                    'required' => false,
                    'class' => 'input-file',
                    'after_element_html' => '<script type="text/javascript">require([\'jquery\'], function ($) {$(\'#template_template_attachment_pdf\').attr(\'accept\', \'.pdf\')});</script>',
                    'note' => __('Use this to upload a PDF file which is then used as the "background" of your created PDF files.')
                ]
            );
        }


        $fieldSet = $form->addFieldset('paper_settings', ['legend' => __('Layout / Paper Configuration')]);

        $fieldSet->addField(
            'template_paper_ori',
            'select',
            [
                'name' => 'template_paper_ori',
                'label' => __('Template Paper Orientation'),
                'title' => __('Template Paper Orientation'),
                'values' => $this->templatePaperOrientation->toOptionArray(),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_custom_form',
            'select',
            [
                'name' => 'template_custom_form',
                'label' => __('Custom Paper Format'),
                'title' => __('Custom Paper Format'),
                'values' => $this->yesNo->toOptionArray(),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_custom_h',
            'text',
            [
                'name' => 'template_custom_h',
                'label' => __('Custom Height (mm)'),
                'title' => __('Custom Height (mm)'),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_custom_w',
            'text',
            [
                'name' => 'template_custom_w',
                'label' => __('Custom Width (mm)'),
                'title' => __('Custom Width (mm)'),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_paper_form',
            'select',
            [
                'name' => 'template_paper_form',
                'label' => __('Paper Format'),
                'title' => __('Paper Format'),
                'values' => $this->templatePaperFormat->toOptionArray(),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_custom_t',
            'text',
            [
                'name' => 'template_custom_t',
                'label' => __('Margin Top (mm)'),
                'title' => __('Margin Top (mm)'),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_custom_b',
            'text',
            [
                'name' => 'template_custom_b',
                'label' => __('Margin Bottom (mm)'),
                'title' => __('Margin Bottom (mm)'),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_custom_l',
            'text',
            [
                'name' => 'template_custom_l',
                'label' => __('Margin Left (mm)'),
                'title' => __('Margin Left (mm)'),
                'required' => true,
            ]
        );

        $fieldSet->addField(
            'template_custom_r',
            'text',
            [
                'name' => 'template_custom_r',
                'label' => __('Margin Right (mm)'),
                'title' => __('Margin Right (mm)'),
                'required' => true,
            ]
        );

        // Define field dependencies
        $this->setChild(
            'form_after',
            $this->getLayout()->createBlock(
                \Magento\Backend\Block\Widget\Form\Element\Dependence::class
            )
                ->addFieldMap("{$htmlIdPrefix}template_custom_form", 'template_custom_form')
                ->addFieldMap("{$htmlIdPrefix}template_custom_h", 'template_custom_h')
                ->addFieldMap("{$htmlIdPrefix}template_custom_w", 'template_custom_w')
                ->addFieldMap("{$htmlIdPrefix}template_paper_form", 'template_paper_form')
                ->addFieldMap("{$htmlIdPrefix}save_pdf_in_backup_folder", 'save_pdf_in_backup_folder')
                ->addFieldMap("{$htmlIdPrefix}read_pdf_from_backup_folder", 'read_pdf_from_backup_folder')
                ->addFieldDependence(
                    'template_custom_h',
                    'template_custom_form',
                    '1'
                )
                ->addFieldDependence(
                    'template_custom_w',
                    'template_custom_form',
                    '1'
                )
                ->addFieldDependence(
                    'template_paper_form',
                    'template_custom_form',
                    '0'
                )
                ->addFieldDependence(
                    'read_pdf_from_backup_folder',
                    'save_pdf_in_backup_folder',
                    '1'
                )
        );

        if (!$model->getId()) {
            $model->setTemplatePaperOri(1);
            $model->setTemplatePaperForm(1);
            $model->setTemplateCustomT(0);
            $model->setTemplateCustomB(0);
            $model->setTemplateCustomL(0);
            $model->setTemplateCustomR(0);
        }

        $form->setValues($model->getData());
        $this->setForm($form);

        parent::_prepareForm();

        return $this;
    }

    /**
     * @return Phrase
     */
    public function getTabLabel()
    {
        return __('PDF Configuration');
    }

    /**
     * Prepare title for tab
     *
     * @return Phrase
     */
    public function getTabTitle()
    {
        return __('PDF Configuration');
    }

    /**
     * @return bool
     */
    public function canShowTab()
    {
        return true;
    }

    /**
     * @return bool
     */
    public function isHidden()
    {
        return false;
    }

    protected function getFormMessages()
    {
        $formMessages = [];
        $formMessages[] = [
            'type' => 'notice',
            'message' => __(
                'Attention: If changing any of the below settings, save the template first BEFORE trying to use "Preview PDF". Otherwise you will not see the changes.'
            )
        ];
        return $formMessages;
    }

    protected function _toHtml()
    {
        if ($this->getRequest()->getParam('ajax')) {
            return parent::_toHtml();
        }
        return $this->_getFormMessages() . parent::_toHtml();
    }

    protected function _getFormMessages()
    {
        $html = '<div id="messages"><div class="messages">';
        foreach ($this->getFormMessages() as $formMessage) {
            $html .= '<div class="message message-' . $formMessage['type'] . ' ' . $formMessage['type'] . '"><div>' . $formMessage['message'] . '</div></div>';
        }
        $html .= '</div></div>';
        return $html;
    }
}
